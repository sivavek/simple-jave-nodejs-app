# name: Deploy to EC2 with Nginx

# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:
#     inputs:
#       app_name:
#         description: 'Application name'
#         required: false
#         default: 'simple-node-app'
#       app_port:
#         description: 'Application port'
#         required: false
#         default: '3000'
#       nginx_root:
#         description: 'Nginx document root'
#         required: false
#         default: '/var/www/html'

# env:
#   APP_NAME: ${{ github.event.inputs.app_name || 'simple-node-app' }}
#   APP_PORT: ${{ github.event.inputs.app_port || '3000' }}
#   NGINX_ROOT: ${{ github.event.inputs.nginx_root || '/var/www/html' }}
#   REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git

# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
    
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '18'
#         cache: 'npm'
    
#     - name: Install dependencies
#       run: npm install
    
#     - name: Run tests
#       run: npm test
    
#     - name: Test application startup
#       run: |
#         timeout 30s npm start &
#         sleep 5
#         curl -f http://localhost:3000/health || exit 1

#   deploy:
#     needs: test
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
    
#     - name: Create deployment script
#       run: |
#         cat > deploy.sh << 'EOF'
#         #!/bin/bash
#         set -e
        
#         # Colors for output
#         RED='\033[0;31m'
#         GREEN='\033[0;32m'
#         YELLOW='\033[1;33m'
#         NC='\033[0m' # No Color
        
#         echo -e "${GREEN}=== Starting Deployment ===${NC}"
        
#         # Variables
#         APP_NAME="${{ env.APP_NAME }}"
#         APP_PORT="${{ env.APP_PORT }}"
#         NGINX_ROOT="${{ env.NGINX_ROOT }}"
#         REPO_URL="${{ env.REPO_URL }}"
#         APP_PATH="${NGINX_ROOT}/${APP_NAME}"
        
#         echo -e "${YELLOW}App Name: ${APP_NAME}${NC}"
#         echo -e "${YELLOW}App Port: ${APP_PORT}${NC}"
#         echo -e "${YELLOW}Nginx Root: ${NGINX_ROOT}${NC}"
#         echo -e "${YELLOW}Repo URL: ${REPO_URL}${NC}"
        
#         # Function to check if command exists
#         command_exists() {
#             command -v "$1" >/dev/null 2>&1
#         }
        
#         # Function to detect OS
#         detect_os() {
#             if [ -f /etc/os-release ]; then
#                 . /etc/os-release
#                 echo $ID
#             else
#                 echo "unknown"
#             fi
#         }
        
#         OS=$(detect_os)
#         echo -e "${YELLOW}Detected OS: ${OS}${NC}"
        
#         # Install packages based on OS
#         install_package() {
#             local package=$1
#             case $OS in
#                 "ubuntu"|"debian")
#                     sudo apt-get update && sudo apt-get install -y $package
#                     ;;
#                 "amzn"|"centos"|"rhel")
#                     sudo yum install -y $package
#                     ;;
#                 "fedora")
#                     sudo dnf install -y $package
#                     ;;
#                 *)
#                     echo -e "${RED}Unsupported OS: $OS${NC}"
#                     exit 1
#                     ;;
#             esac
#         }
        
#         # Check and install Git
#         echo -e "${GREEN}=== Checking Git Installation ===${NC}"
#         if ! command_exists git; then
#             echo -e "${YELLOW}Git not found. Installing Git...${NC}"
#             install_package git
#             echo -e "${GREEN}Git installed successfully${NC}"
#         else
#             echo -e "${GREEN}Git is already installed${NC}"
#             git --version
#         fi
        
#         # Check and install Nginx
#         echo -e "${GREEN}=== Checking Nginx Installation ===${NC}"
#         if ! command_exists nginx; then
#             echo -e "${YELLOW}Nginx not found. Installing Nginx...${NC}"
#             install_package nginx
            
#             # Start and enable nginx
#             sudo systemctl start nginx
#             sudo systemctl enable nginx
#             echo -e "${GREEN}Nginx installed and started successfully${NC}"
#         else
#             echo -e "${GREEN}Nginx is already installed${NC}"
#             nginx -v
#         fi
        
#         # Check and install Node.js if not present
#         echo -e "${GREEN}=== Checking Node.js Installation ===${NC}"
#         if ! command_exists node; then
#             echo -e "${YELLOW}Node.js not found. Installing Node.js...${NC}"
#             case $OS in
#                 "ubuntu"|"debian")
#                     curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
#                     sudo apt-get install -y nodejs
#                     ;;
#                 "amzn"|"centos"|"rhel")
#                     curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
#                     sudo yum install -y nodejs npm
#                     ;;
#                 *)
#                     echo -e "${RED}Manual Node.js installation required for $OS${NC}"
#                     exit 1
#                     ;;
#             esac
#             echo -e "${GREEN}Node.js installed successfully${NC}"
#         else
#             echo -e "${GREEN}Node.js is already installed${NC}"
#             node --version
#             npm --version
#         fi
        
#         # Ensure nginx root directory exists
#         echo -e "${GREEN}=== Setting up directories ===${NC}"
#         sudo mkdir -p ${NGINX_ROOT}
        
#         # Handle existing repository
#         if [ -d "${APP_PATH}" ]; then
#             echo -e "${YELLOW}Repository already exists at ${APP_PATH}${NC}"
            
#             # Create backup
#             BACKUP_NAME="${APP_NAME}-backup-$(date +%Y%m%d_%H%M%S)"
#             BACKUP_PATH="${NGINX_ROOT}/${BACKUP_NAME}"
            
#             echo -e "${YELLOW}Creating backup at ${BACKUP_PATH}${NC}"
#             sudo cp -r ${APP_PATH} ${BACKUP_PATH}
            
#             # Stop existing application
#             echo -e "${YELLOW}Stopping existing application...${NC}"
#             sudo systemctl stop ${APP_NAME} || true
#             sudo pkill -f "node.*${APP_NAME}" || true
            
#             # Remove existing directory
#             echo -e "${YELLOW}Removing existing repository...${NC}"
#             sudo rm -rf ${APP_PATH}
#         fi
        
#         # Clone fresh repository
#         echo -e "${GREEN}=== Cloning Repository ===${NC}"
#         sudo git clone ${REPO_URL} ${APP_PATH}
        
#         # Set ownership
#         sudo chown -R $USER:$USER ${APP_PATH}
        
#         # Install dependencies
#         echo -e "${GREEN}=== Installing Dependencies ===${NC}"
#         cd ${APP_PATH}
#         npm install --production
        
#         # Create systemd service
#         echo -e "${GREEN}=== Creating Systemd Service ===${NC}"
#         sudo tee /etc/systemd/system/${APP_NAME}.service > /dev/null <<EOL
#         [Unit]
#         Description=${APP_NAME} Node.js Application
#         After=network.target
        
#         [Service]
#         Type=simple
#         User=$USER
#         WorkingDirectory=${APP_PATH}
#         ExecStart=/usr/bin/node app.js
#         Restart=on-failure
#         RestartSec=10
#         Environment=NODE_ENV=production
#         Environment=PORT=${APP_PORT}
#         StandardOutput=syslog
#         StandardError=syslog
#         SyslogIdentifier=${APP_NAME}
        
#         [Install]
#         WantedBy=multi-user.target
#         EOL
        
#         # Reload systemd and start service
#         sudo systemctl daemon-reload
#         sudo systemctl enable ${APP_NAME}
#         sudo systemctl start ${APP_NAME}
        
#         # Create nginx configuration
#         echo -e "${GREEN}=== Configuring Nginx ===${NC}"
#         sudo tee /etc/nginx/sites-available/${APP_NAME} > /dev/null <<EOL
#         server {
#             listen 80;
#             server_name _;
            
#             location / {
#                 proxy_pass http://localhost:${APP_PORT};
#                 proxy_http_version 1.1;
#                 proxy_set_header Upgrade \$http_upgrade;
#                 proxy_set_header Connection 'upgrade';
#                 proxy_set_header Host \$host;
#                 proxy_set_header X-Real-IP \$remote_addr;
#                 proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
#                 proxy_set_header X-Forwarded-Proto \$scheme;
#                 proxy_cache_bypass \$http_upgrade;
#                 proxy_read_timeout 86400;
#             }
            
#             location /nginx-health {
#                 access_log off;
#                 return 200 "healthy\\n";
#                 add_header Content-Type text/plain;
#             }
#         }
#         EOL
        
#         # Enable site (handle both Ubuntu and CentOS style configs)
#         if [ -d "/etc/nginx/sites-enabled" ]; then
#             sudo ln -sf /etc/nginx/sites-available/${APP_NAME} /etc/nginx/sites-enabled/
#             sudo rm -f /etc/nginx/sites-enabled/default
#         else
#             # For CentOS/RHEL, include in main config
#             if ! grep -q "include.*${APP_NAME}" /etc/nginx/nginx.conf; then
#                 sudo sed -i '/http {/a\    include /etc/nginx/sites-available/'${APP_NAME}';' /etc/nginx/nginx.conf
#             fi
#         fi
        
#         # Test nginx configuration
#         sudo nginx -t
        
#         # Restart nginx
#         sudo systemctl restart nginx
        
#         # Verify deployment
#         echo -e "${GREEN}=== Verifying Deployment ===${NC}"
#         sleep 5
        
#         # Check if service is running
#         sudo systemctl status ${APP_NAME} --no-pager
        
#         # Test application endpoints
#         curl -f http://localhost:${APP_PORT}/health || (echo -e "${RED}Health check failed${NC}" && exit 1)
#         curl -f http://localhost/nginx-health || (echo -e "${RED}Nginx health check failed${NC}" && exit 1)
        
#         echo -e "${GREEN}=== Deployment Completed Successfully! ===${NC}"
#         echo -e "${GREEN}Application is running on port ${APP_PORT}${NC}"
#         echo -e "${GREEN}Nginx is proxying requests to the application${NC}"
#         EOF
        
#         chmod +x deploy.sh
    
#     - name: Copy deployment script to EC2
#       run: |
#         echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
#         chmod 600 private_key.pem
#         scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
    
#     - name: Execute deployment on EC2
#       run: |
#         ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash /tmp/deploy.sh'
    
#     - name: Verify deployment
#       run: |
#         sleep 10
#         curl -f http://${{ secrets.EC2_HOST }}/nginx-health || exit 1
#         echo "✅ Deployment verified successfully!"
    
#     - name: Cleanup
#       if: always()
#       run: |
#         rm -f private_key.pem
#         ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'rm -f /tmp/deploy.sh' || true

# name: Deploy to EC2 with Nginx

# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:
#     inputs:
#       app_name:
#         description: 'Application name'
#         required: false
#         default: 'simple-node-app'
#       app_port:
#         description: 'Application port'
#         required: false
#         default: '3000'
#       nginx_root:
#         description: 'Nginx document root'
#         required: false
#         default: '/var/www/html'

# env:
#   APP_NAME: ${{ github.event.inputs.app_name || 'simple-node-app' }}
#   APP_PORT: ${{ github.event.inputs.app_port || '3000' }}
#   NGINX_ROOT: ${{ github.event.inputs.nginx_root || '/var/www/html' }}
#   REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git

# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
    
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '18'
#         cache: 'npm'
    
#     - name: Install dependencies
#       run: npm install
    
#     - name: Run tests
#       run: npm test
    
#     - name: Test application startup
#       run: |
#         timeout 30s npm start &
#         sleep 5
#         curl -f http://localhost:3000/health || exit 1

#   deploy:
#     needs: test
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
    
#     - name: Create deployment script
#       run: |
#         cat > deploy.sh << 'EOF'
#         #!/bin/bash
#         set -e
        
#         # Colors for output
#         RED='\033[0;31m'
#         GREEN='\033[0;32m'
#         YELLOW='\033[1;33m'
#         NC='\033[0m' # No Color
        
#         echo -e "${GREEN}=== Starting Deployment ===${NC}"
        
#         # Variables
#         APP_NAME="${{ env.APP_NAME }}"
#         APP_PORT="${{ env.APP_PORT }}"
#         NGINX_ROOT="${{ env.NGINX_ROOT }}"
#         REPO_URL="${{ env.REPO_URL }}"
#         APP_PATH="${NGINX_ROOT}/${APP_NAME}"
        
#         echo -e "${YELLOW}App Name: ${APP_NAME}${NC}"
#         echo -e "${YELLOW}App Port: ${APP_PORT}${NC}"
#         echo -e "${YELLOW}Nginx Root: ${NGINX_ROOT}${NC}"
#         echo -e "${YELLOW}Repo URL: ${REPO_URL}${NC}"
        
#         # Function to check if command exists
#         command_exists() {
#             command -v "$1" >/dev/null 2>&1
#         }
        
#         # Function to detect OS
#         detect_os() {
#             if [ -f /etc/os-release ]; then
#                 . /etc/os-release
#                 echo $ID
#             else
#                 echo "unknown"
#             fi
#         }
        
#         OS=$(detect_os)
#         echo -e "${YELLOW}Detected OS: ${OS}${NC}"
        
#         # Install packages based on OS
#         install_package() {
#             local package=$1
#             case $OS in
#                 "ubuntu"|"debian")
#                     sudo apt-get update && sudo apt-get install -y $package
#                     ;;
#                 "amzn"|"centos"|"rhel")
#                     sudo yum install -y $package
#                     ;;
#                 "fedora")
#                     sudo dnf install -y $package
#                     ;;
#                 *)
#                     echo -e "${RED}Unsupported OS: $OS${NC}"
#                     exit 1
#                     ;;
#             esac
#         }
        
#         # Check and install Git
#         echo -e "${GREEN}=== Checking Git Installation ===${NC}"
#         if ! command_exists git; then
#             echo -e "${YELLOW}Git not found. Installing Git...${NC}"
#             install_package git
#             echo -e "${GREEN}Git installed successfully${NC}"
#         else
#             echo -e "${GREEN}Git is already installed${NC}"
#             git --version
#         fi
        
#         # Check and install Nginx
#         echo -e "${GREEN}=== Checking Nginx Installation ===${NC}"
#         if ! command_exists nginx; then
#             echo -e "${YELLOW}Nginx not found. Installing Nginx...${NC}"
#             install_package nginx
            
#             # Start and enable nginx
#             sudo systemctl start nginx
#             sudo systemctl enable nginx
#             echo -e "${GREEN}Nginx installed and started successfully${NC}"
#         else
#             echo -e "${GREEN}Nginx is already installed${NC}"
#             nginx -v
#         fi
        
#         # Check and install Node.js if not present
#         echo -e "${GREEN}=== Checking Node.js Installation ===${NC}"
#         if ! command_exists node; then
#             echo -e "${YELLOW}Node.js not found. Installing Node.js...${NC}"
#             case $OS in
#                 "ubuntu"|"debian")
#                     curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
#                     sudo apt-get install -y nodejs
#                     ;;
#                 "amzn"|"centos"|"rhel")
#                     curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
#                     sudo yum install -y nodejs npm
#                     ;;
#                 *)
#                     echo -e "${RED}Manual Node.js installation required for $OS${NC}"
#                     exit 1
#                     ;;
#             esac
#             echo -e "${GREEN}Node.js installed successfully${NC}"
#         else
#             echo -e "${GREEN}Node.js is already installed${NC}"
#             node --version
#             npm --version
#         fi
        
#         # Ensure nginx root directory exists
#         echo -e "${GREEN}=== Setting up directories ===${NC}"
#         sudo mkdir -p ${NGINX_ROOT}
        
#         # Handle existing repository
#         if [ -d "${APP_PATH}" ]; then
#             echo -e "${YELLOW}Repository already exists at ${APP_PATH}${NC}"
            
#             # Create backup
#             BACKUP_NAME="${APP_NAME}-backup-$(date +%Y%m%d_%H%M%S)"
#             BACKUP_PATH="${NGINX_ROOT}/${BACKUP_NAME}"
            
#             echo -e "${YELLOW}Creating backup at ${BACKUP_PATH}${NC}"
#             sudo cp -r ${APP_PATH} ${BACKUP_PATH}
            
#             # Stop existing application
#             echo -e "${YELLOW}Stopping existing application...${NC}"
#             sudo systemctl stop ${APP_NAME} || true
#             sudo pkill -f "node.*${APP_NAME}" || true
            
#             # Remove existing directory
#             echo -e "${YELLOW}Removing existing repository...${NC}"
#             sudo rm -rf ${APP_PATH}
#         fi
        
#         # Clone fresh repository
#         echo -e "${GREEN}=== Cloning Repository ===${NC}"
#         sudo git clone ${REPO_URL} ${APP_PATH}
        
#         # Set ownership
#         sudo chown -R $USER:$USER ${APP_PATH}
        
#         # Install dependencies
#         echo -e "${GREEN}=== Installing Dependencies ===${NC}"
#         cd ${APP_PATH}
#         npm install --production
        
#         # Create systemd service
#         echo -e "${GREEN}=== Creating Systemd Service ===${NC}"
#         sudo tee /etc/systemd/system/${APP_NAME}.service > /dev/null <<EOL
#         [Unit]
#         Description=${APP_NAME} Node.js Application
#         After=network.target
        
#         [Service]
#         Type=simple
#         User=$USER
#         WorkingDirectory=${APP_PATH}
#         ExecStart=/usr/bin/node app.js
#         Restart=on-failure
#         RestartSec=10
#         Environment=NODE_ENV=production
#         Environment=PORT=${APP_PORT}
#         StandardOutput=syslog
#         StandardError=syslog
#         SyslogIdentifier=${APP_NAME}
        
#         [Install]
#         WantedBy=multi-user.target
#         EOL
        
#         # Reload systemd and start service
#         sudo systemctl daemon-reload
#         sudo systemctl enable ${APP_NAME}
#         sudo systemctl start ${APP_NAME}
        
#         # Create nginx configuration
#         echo -e "${GREEN}=== Configuring Nginx ===${NC}"
        
#         # Create sites-available and sites-enabled directories if they don't exist
#         sudo mkdir -p /etc/nginx/sites-available
#         sudo mkdir -p /etc/nginx/sites-enabled
        
#         # Create nginx configuration file
#         sudo tee /etc/nginx/sites-available/${APP_NAME} > /dev/null <<EOL
#         server {
#             listen 80;
#             server_name _;
            
#             location / {
#                 proxy_pass http://localhost:${APP_PORT};
#                 proxy_http_version 1.1;
#                 proxy_set_header Upgrade \$http_upgrade;
#                 proxy_set_header Connection 'upgrade';
#                 proxy_set_header Host \$host;
#                 proxy_set_header X-Real-IP \$remote_addr;
#                 proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
#                 proxy_set_header X-Forwarded-Proto \$scheme;
#                 proxy_cache_bypass \$http_upgrade;
#                 proxy_read_timeout 86400;
#             }
            
#             location /nginx-health {
#                 access_log off;
#                 return 200 "healthy\\n";
#                 add_header Content-Type text/plain;
#             }
#         }
#         EOL
        
#         # Enable site configuration
#         sudo ln -sf /etc/nginx/sites-available/${APP_NAME} /etc/nginx/sites-enabled/
        
#         # Remove default site if it exists
#         sudo rm -f /etc/nginx/sites-enabled/default
        
#         # Ensure nginx.conf includes sites-enabled directory
#         if ! grep -q "include.*sites-enabled" /etc/nginx/nginx.conf; then
#             echo -e "${YELLOW}Adding sites-enabled include to nginx.conf${NC}"
#             sudo sed -i '/http {/a\    include /etc/nginx/sites-enabled/*;' /etc/nginx/nginx.conf
#         fi
        
#         # For systems that don't use sites-available/sites-enabled structure,
#         # also create a direct config file
#         if [[ "$OS" == "amzn" || "$OS" == "centos" || "$OS" == "rhel" ]]; then
#             echo -e "${YELLOW}Creating additional config for $OS${NC}"
#             sudo tee /etc/nginx/conf.d/${APP_NAME}.conf > /dev/null <<EOL
#         server {
#             listen 80;
#             server_name _;
            
#             location / {
#                 proxy_pass http://localhost:${APP_PORT};
#                 proxy_http_version 1.1;
#                 proxy_set_header Upgrade \$http_upgrade;
#                 proxy_set_header Connection 'upgrade';
#                 proxy_set_header Host \$host;
#                 proxy_set_header X-Real-IP \$remote_addr;
#                 proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
#                 proxy_set_header X-Forwarded-Proto \$scheme;
#                 proxy_cache_bypass \$http_upgrade;
#                 proxy_read_timeout 86400;
#             }
            
#             location /nginx-health {
#                 access_log off;
#                 return 200 "healthy\\n";
#                 add_header Content-Type text/plain;
#             }
#         }
#         EOL
#         fi
        
#         # Test nginx configuration
#         sudo nginx -t
        
#         # Restart nginx
#         sudo systemctl restart nginx
        
#         # Verify deployment
#         echo -e "${GREEN}=== Verifying Deployment ===${NC}"
#         sleep 5
        
#         # Check if service is running
#         sudo systemctl status ${APP_NAME} --no-pager
        
#         # Test application endpoints
#         curl -f http://localhost:${APP_PORT}/health || (echo -e "${RED}Health check failed${NC}" && exit 1)
#         curl -f http://localhost/nginx-health || (echo -e "${RED}Nginx health check failed${NC}" && exit 1)
        
#         echo -e "${GREEN}=== Deployment Completed Successfully! ===${NC}"
#         echo -e "${GREEN}Application is running on port ${APP_PORT}${NC}"
#         echo -e "${GREEN}Nginx is proxying requests to the application${NC}"
#         EOF
        
#         chmod +x deploy.sh
    
#     - name: Copy deployment script to EC2
#       run: |
#         echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
#         chmod 600 private_key.pem
#         scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
    
#     - name: Execute deployment on EC2
#       run: |
#         ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash /tmp/deploy.sh'
    
#     - name: Verify deployment
#       run: |
#         sleep 10
#         curl -f http://${{ secrets.EC2_HOST }}/nginx-health || exit 1
#         echo "✅ Deployment verified successfully!"
    
#     - name: Cleanup
#       if: always()
#       run: |
#         rm -f private_key.pem
#         ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'rm -f /tmp/deploy.sh' || true

name: Deploy to EC2 with Nginx

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Application name'
        required: false
        default: 'simple-node-app'
      app_port:
        description: 'Application port'
        required: false
        default: '3000'
      nginx_root:
        description: 'Nginx document root'
        required: false
        default: '/var/www/html'

env:
  APP_NAME: ${{ github.event.inputs.app_name || 'simple-node-app' }}
  APP_PORT: ${{ github.event.inputs.app_port || '3000' }}
  NGINX_ROOT: ${{ github.event.inputs.nginx_root || '/var/www/html' }}
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Colors for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        NC='\033[0m' # No Color
        
        echo -e "${GREEN}=== Starting Deployment ===${NC}"
        
        # Variables
        APP_NAME="${{ env.APP_NAME }}"
        APP_PORT="${{ env.APP_PORT }}"
        NGINX_ROOT="${{ env.NGINX_ROOT }}"
        REPO_URL="${{ env.REPO_URL }}"
        APP_PATH="${NGINX_ROOT}/${APP_NAME}"
        
        echo -e "${YELLOW}App Name: ${APP_NAME}${NC}"
        echo -e "${YELLOW}App Port: ${APP_PORT}${NC}"
        echo -e "${YELLOW}Nginx Root: ${NGINX_ROOT}${NC}"
        echo -e "${YELLOW}Repo URL: ${REPO_URL}${NC}"
        
        # Function to check if command exists
        command_exists() {
            command -v "$1" >/dev/null 2>&1
        }
        
        # Function to detect OS
        detect_os() {
            if [ -f /etc/os-release ]; then
                . /etc/os-release
                echo $ID
            else
                echo "unknown"
            fi
        }
        
        OS=$(detect_os)
        echo -e "${YELLOW}Detected OS: ${OS}${NC}"
        
        # Install packages based on OS
        install_package() {
            local package=$1
            case $OS in
                "ubuntu"|"debian")
                    sudo apt-get update && sudo apt-get install -y $package
                    ;;
                "amzn"|"centos"|"rhel")
                    sudo yum install -y $package
                    ;;
                "fedora")
                    sudo dnf install -y $package
                    ;;
                *)
                    echo -e "${RED}Unsupported OS: $OS${NC}"
                    exit 1
                    ;;
            esac
        }
        
        # Check and install Git
        echo -e "${GREEN}=== Checking Git Installation ===${NC}"
        if ! command_exists git; then
            echo -e "${YELLOW}Git not found. Installing Git...${NC}"
            install_package git
            echo -e "${GREEN}Git installed successfully${NC}"
        else
            echo -e "${GREEN}Git is already installed${NC}"
            git --version
        fi
        
        # Check and install Nginx
        echo -e "${GREEN}=== Checking Nginx Installation ===${NC}"
        if ! command_exists nginx; then
            echo -e "${YELLOW}Nginx not found. Installing Nginx...${NC}"
            install_package nginx
            
            # Start and enable nginx
            sudo systemctl start nginx
            sudo systemctl enable nginx
            echo -e "${GREEN}Nginx installed and started successfully${NC}"
        else
            echo -e "${GREEN}Nginx is already installed${NC}"
            nginx -v
        fi
        
        # Check and install Node.js if not present
        echo -e "${GREEN}=== Checking Node.js Installation ===${NC}"
        if ! command_exists node; then
            echo -e "${YELLOW}Node.js not found. Installing Node.js...${NC}"
            case $OS in
                "ubuntu"|"debian")
                    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                    sudo apt-get install -y nodejs
                    ;;
                "amzn"|"centos"|"rhel")
                    curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
                    sudo yum install -y nodejs npm
                    ;;
                *)
                    echo -e "${RED}Manual Node.js installation required for $OS${NC}"
                    exit 1
                    ;;
            esac
            echo -e "${GREEN}Node.js installed successfully${NC}"
        else
            echo -e "${GREEN}Node.js is already installed${NC}"
            node --version
            npm --version
        fi
        
        # Ensure nginx root directory exists
        echo -e "${GREEN}=== Setting up directories ===${NC}"
        sudo mkdir -p ${NGINX_ROOT}
        
        # Handle existing repository
        if [ -d "${APP_PATH}" ]; then
            echo -e "${YELLOW}Repository already exists at ${APP_PATH}${NC}"
            
            # Create backup
            BACKUP_NAME="${APP_NAME}-backup-$(date +%Y%m%d_%H%M%S)"
            BACKUP_PATH="${NGINX_ROOT}/${BACKUP_NAME}"
            
            echo -e "${YELLOW}Creating backup at ${BACKUP_PATH}${NC}"
            sudo cp -r ${APP_PATH} ${BACKUP_PATH}
            
            # Stop existing application
            echo -e "${YELLOW}Stopping existing application...${NC}"
            sudo systemctl stop ${APP_NAME} || true
            sudo pkill -f "node.*${APP_NAME}" || true
            
            # Remove existing directory
            echo -e "${YELLOW}Removing existing repository...${NC}"
            sudo rm -rf ${APP_PATH}
        fi
        
        # Clone fresh repository
        echo -e "${GREEN}=== Cloning Repository ===${NC}"
        sudo git clone ${REPO_URL} ${APP_PATH}
        
        # Set ownership
        sudo chown -R $USER:$USER ${APP_PATH}
        
        # Install dependencies
        echo -e "${GREEN}=== Installing Dependencies ===${NC}"
        cd ${APP_PATH}
        npm install --production
        
        # Create systemd service
        echo -e "${GREEN}=== Creating Systemd Service ===${NC}"
        sudo tee /etc/systemd/system/${APP_NAME}.service > /dev/null <<EOL
        [Unit]
        Description=${APP_NAME} Node.js Application
        After=network.target
        
        [Service]
        Type=simple
        User=$USER
        WorkingDirectory=${APP_PATH}
        ExecStart=/usr/bin/node app.js
        Restart=on-failure
        RestartSec=10
        Environment=NODE_ENV=production
        Environment=PORT=${APP_PORT}
        StandardOutput=syslog
        StandardError=syslog
        SyslogIdentifier=${APP_NAME}
        
        [Install]
        WantedBy=multi-user.target
        EOL
        
        # Reload systemd and start service
        sudo systemctl daemon-reload
        sudo systemctl enable ${APP_NAME}
        sudo systemctl start ${APP_NAME}
        
        # Create nginx configuration
        echo -e "${GREEN}=== Configuring Nginx ===${NC}"
        
        # Create sites-available and sites-enabled directories if they don't exist
        sudo mkdir -p /etc/nginx/sites-available
        sudo mkdir -p /etc/nginx/sites-enabled
        
        # Create nginx configuration file
        sudo tee /etc/nginx/sites-available/${APP_NAME} > /dev/null <<EOL
        server {
            listen 80;
            server_name _;
            
            location / {
                proxy_pass http://localhost:${APP_PORT};
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_cache_bypass \$http_upgrade;
                proxy_read_timeout 86400;
            }
            
            location /nginx-health {
                access_log off;
                return 200 "healthy\\n";
                add_header Content-Type text/plain;
            }
        }
        EOL
        
        # Enable site configuration
        sudo ln -sf /etc/nginx/sites-available/${APP_NAME} /etc/nginx/sites-enabled/
        
        # Remove default site if it exists
        sudo rm -f /etc/nginx/sites-enabled/default
        
        # Ensure nginx.conf includes sites-enabled directory
        if ! grep -q "include.*sites-enabled" /etc/nginx/nginx.conf; then
            echo -e "${YELLOW}Adding sites-enabled include to nginx.conf${NC}"
            sudo sed -i '/http {/a\    include /etc/nginx/sites-enabled/*;' /etc/nginx/nginx.conf
        fi
        
        # For systems that don't use sites-available/sites-enabled structure,
        # also create a direct config file
        if [[ "$OS" == "amzn" || "$OS" == "centos" || "$OS" == "rhel" ]]; then
            echo -e "${YELLOW}Creating additional config for $OS${NC}"
            sudo tee /etc/nginx/conf.d/${APP_NAME}.conf > /dev/null <<EOL
        server {
            listen 80;
            server_name _;
            
            location / {
                proxy_pass http://localhost:${APP_PORT};
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_cache_bypass \$http_upgrade;
                proxy_read_timeout 86400;
            }
            
            location /nginx-health {
                access_log off;
                return 200 "healthy\\n";
                add_header Content-Type text/plain;
            }
        }
        EOL
        fi
        
        # Remove any conflicting default configurations
        echo -e "${YELLOW}Removing conflicting nginx configurations...${NC}"
        sudo rm -f /etc/nginx/sites-enabled/default
        sudo rm -f /etc/nginx/conf.d/default.conf
        
        # Test nginx configuration
        echo -e "${YELLOW}Testing nginx configuration...${NC}"
        sudo nginx -t
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}Nginx configuration test passed${NC}"
        else
            echo -e "${RED}Nginx configuration test failed${NC}"
            echo -e "${YELLOW}Checking nginx error log:${NC}"
            sudo tail -10 /var/log/nginx/error.log || true
            exit 1
        fi
        
        # Restart nginx
        echo -e "${YELLOW}Restarting nginx...${NC}"
        sudo systemctl restart nginx
        
        # Check nginx status
        sudo systemctl status nginx --no-pager
        
        # Debug: Show active nginx configuration
        echo -e "${YELLOW}Active nginx configurations:${NC}"
        sudo nginx -T | grep -E "(server_name|listen|location)" || true
        
        # Verify deployment
        echo -e "${GREEN}=== Verifying Deployment ===${NC}"
        sleep 5
        
        # Check if service is running
        sudo systemctl status ${APP_NAME} --no-pager
        
        # Test application endpoints
        curl -f http://localhost:${APP_PORT}/health || (echo -e "${RED}Health check failed${NC}" && exit 1)
        curl -f http://localhost/nginx-health || (echo -e "${RED}Nginx health check failed${NC}" && exit 1)
        
        echo -e "${GREEN}=== Deployment Completed Successfully! ===${NC}"
        echo -e "${GREEN}Application is running on port ${APP_PORT}${NC}"
        echo -e "${GREEN}Nginx is proxying requests to the application${NC}"
        EOF
        
        chmod +x deploy.sh
    
    - name: Copy deployment script to EC2
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
    
    - name: Execute deployment on EC2
      run: |
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash /tmp/deploy.sh'
    
    - name: Verify deployment
      run: |
        sleep 10
        curl -f http://${{ secrets.EC2_HOST }}/nginx-health || exit 1
        echo "✅ Deployment verified successfully!"
    
    - name: Cleanup
      if: always()
      run: |
        rm -f private_key.pem
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'rm -f /tmp/deploy.sh' || true